# -*- coding: utf-8 -*-
"""SpeedAnomaly_Load&Use.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p1Sd0xjmSIsvYC7r1aIfErOjnR6fSlrk
"""

from tensorflow.keras.layers import Dense, LSTM, Dropout, RepeatVector, TimeDistributed
from tensorflow.keras.models import Sequential
import pandas as pd
import numpy as np
import geopy.distance
import tensorflow as tf
from tensorflow import keras
from sklearn.preprocessing import StandardScaler,Normalizer
import plotly.graph_objects as go
np.random.seed(1)
tf.random.set_seed(1)
import pickle
from sklearn.ensemble import RandomForestRegressor
import math
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score
import matplotlib.pyplot as plt
from sklearn.svm import OneClassSVM
from sklearn.metrics import precision_score, recall_score, f1_score
#print('Tensorflow version: ', tf.__version__)

"""Read Speed Bounds File and Load Model , Normalizer is the same used in training """

scaler=Normalizer()
bounds = pd.read_csv("speed_bounds_update.csv")
# Saved model file 
with open('model_rf_v3_norm.pkl', 'rb') as f:
    rf_regressor = pickle.load(f)

"""PreProcessing"""

import math
def haversine_distance(lat1, lon1, lat2, lon2):
    # convert decimal degrees to radians
    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])

    # haversine formula
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2
    c = 2 * math.asin(math.sqrt(a))
    r = 6.378e+6  # Radius of earth in meters
    return c * r

def calculate_speed(vessel_points):

  vessel_points['BaseDateTime'] = pd.to_datetime(vessel_points['BaseDateTime'])
  vessel_points = vessel_points.sort_values(['BaseDateTime'])
  vessel_points['distance']=0
  vessel_points['time_diff']=0
  # Time in seconds
  vessel_points['time_diff'] = (vessel_points['BaseDateTime'].diff().dt.total_seconds())
  for i in range(1, len(vessel_points)):
        lat1, lon1 = vessel_points.iloc[i-1]['LAT'], vessel_points.iloc[i-1]['LON']
        lat2, lon2 = vessel_points.iloc[i]['LAT'], vessel_points.iloc[i]['LON']

        dist = haversine_distance(lat1, lon1, lat2, lon2)
        vessel_points.at[vessel_points.index[i], 'distance'] = dist
  vessel_points['segment_speed']=0
  vessel_points['segment_speed'] = (vessel_points['distance']) / vessel_points['time_diff']

  return vessel_points

"""Main Function for detection of anomalous behaviour with respect to vessel"""
def Speed(X_test,bounds):
    # Calculate distance, time difference as model features
    vessel_data = calculate_speed(X_test)
    X_Test_first = vessel_data[['SourceLat', 'SourceLon', 'DestLat', 'DestLon',
            'LAT', 'LON', 'Heading','SOG','time_diff', 'distance']].values
    
    # Save the speed ranges for the Source and Destination of input data
    filtered_data = bounds[
        (bounds['SourceLatitude'] ==   X_test['SourceLat'].iloc[0]) &
        (bounds['SourceLongitude'] == X_test['SourceLon'].iloc[0]) &
        (bounds['DestLatitude'] == X_test['DestLat'].iloc[0]) &
        (bounds['DestLongitude'] == X_test['DestLon'].iloc[0])
        ]

        # Check if any matching rows exist
    if not filtered_data.empty:
        # Extract upper bound and lower bound
        upper_bound = filtered_data['upper_bound'].values[0]
        lower_bound = filtered_data['lower_bound'].values[0]

    #predict speed of vessel it should be moving at
    X_scaled = scaler.transform(X_Test_first)
    segment_speed_pred = rf_regressor.predict(X_scaled)
    data_length = len(X_test) - 1
    #save anomalous indexes from the original data frame
    anomalies_indices = np.where((segment_speed_pred > upper_bound) | (segment_speed_pred < lower_bound))[0]
    #return -1 for anomaly and 0 for no anomaly
    if anomalies_indices.size > 0:
        last_anomaly_index = anomalies_indices[-1]
        if last_anomaly_index == data_length:
            return -1
        else:
            return 0
    else:
        return 0

"""This is how we call the function
Speed(data,bounds)
"""

